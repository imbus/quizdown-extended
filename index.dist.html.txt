<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <script src="./quizdown.iife.js"></script>
  <title>Quizdown Demo Page</title>

  <style>
    html {
      font-family: sans-serif;
    }

    body {
      font-size: 1.1em;
      line-height: 1.5;
    }

    .container {
      margin: auto;
      max-width: 600px;
    }
  </style>

  <script>

    //Quizdown.init();
  </script>
</head>

<body>
  <div class="container">
    <h1>Quizdown Demo Page</h1>
    <div class="quizdown">
      ---
      shuffleAnswers: true
      shuffleQuestions: true
      nQuestions: 5
      passingGrade: 80
      customPassMsg: You have Passed!
      customFailMsg: You have not passed
      ---

      #### What's the value of $x$?

      This is what I mean:
      $$
      x=\sqrt{\frac{9}{16}}
      $$

      > Also check out $\sqrt{x+2}$!

      - [x] Try out: $x=0.75$
      - [ ] $x=0.5$ could also *be correct*!
      - [ ] perhaps $x=1$?
      - [ ] $x=1.5$

      #### What's the value of `x[3]`?

      ```python
      # a python list
      x = [1, 2, 3, 4]
      ```

      - [ ] 1
      - [ ] 2
      - [ ] 3
      - [x] 4

      #### <i>Is that italic</i>

      ```python
      x = [1, 2, 3, 4]
      ```

      - [x] Yes
      - [x] Yup, it is
      - [ ] No

      #### Order the following letters

      1. a
      2. b
      3. c
      4. d

      ## Please bring the following into sequence!

      That's **super easy**!

      > Three is larger than one...

      1. One
      2. Two
      3. Three
      4. Four
      5. Five
    </div>

    <div id="stats">
      <p id="numberOfQuestions"></p>
      <p id="visited"></p>
      <p id="solved"></p>
      <p id="right"></p>
      <p id="wrong"></p>
    </div>
  </div>

  <script>

    const quizdown = new Quizdown();
    console.log(quizdown);

    quizdown.init();

    quizdown.getShikiInstance()
      .then(async (instance) => {
        console.log(instance);
        await quizdown.registerShikiLanguage("");
        await quizdown.registerShikiTheme("");
      })

    /*
    const shadowHost = document.querySelector('.quizdown');
    quizdown.listenForStats(shadowHost, (event) => {
      document.getElementById('numberOfQuestions').innerText = "# of questions: " + event.numberOfQuestions;
      document.getElementById('visited').innerText = "visited: " + event.visited;
      document.getElementById('solved').innerText = "solved: " + event.solved;
      document.getElementById('right').innerText = "right: " + event.right;
      document.getElementById('wrong').innerText = "wrong: " + event.wrong;
    });*/

    window.addEventListener('load', () => {
      const config = { startOnLoad: false };

      // Safely wait for #quiz-container to exist in the DOM
      const waitForQuizContainer = () => {
        const host = document.getElementsByClassName('quizdown')[0];

        console.log(host);
        if (!host) {
          // Wait until #quiz-container exists
          requestAnimationFrame(waitForQuizContainer);
          return;
        }

        // Now that it exists, observe it for when content is added
        const observer = new MutationObserver((mutations, obs) => {
          if (host.innerHTML.trim().length > 0) {
            obs.disconnect(); // Stop watching

            const rawQuizdown = host.innerHTML;

            try {
              console.log("start listening");

              quizdown.listenForStats(host, (stats) => {
                document.getElementById('numberOfQuestions').innerText = "# of questions: " + stats.numberOfQuestions;
                document.getElementById('visited').innerText = "Visited: " + stats.visited;
                document.getElementById('solved').innerText = "Solved: " + stats.solved;
                document.getElementById('right').innerText = "Right: " + stats.right;
                document.getElementById('wrong').innerText = "Wrong: " + stats.wrong;
              });
            } catch (err) {
              console.error("Failed to render quiz:", err);
            }
          }
        });

        // Watch for changes to child elements of the host
        observer.observe(host, { childList: true, subtree: true });
      };

      waitForQuizContainer();
    });
  </script>
</body>

</html>